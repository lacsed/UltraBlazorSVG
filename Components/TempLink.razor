@using System.Globalization
@if (complete)
{
    <line x1="@lineStart.x.ToString(CultureInfo.InvariantCulture)" y1="@lineStart.y.ToString(CultureInfo.InvariantCulture)" x2="@lineEnd.x.ToString(CultureInfo.InvariantCulture)" y2="@lineEnd.y.ToString(CultureInfo.InvariantCulture)" stroke="black" stroke-width="2" />
}
<polygon points="@arrowTip.x.ToString(CultureInfo.InvariantCulture) @arrowTip.y.ToString(CultureInfo.InvariantCulture) @rightWing.x.ToString(CultureInfo.InvariantCulture) @rightWing.y.ToString(CultureInfo.InvariantCulture) @leftWing.x.ToString(CultureInfo.InvariantCulture) @leftWing.y.ToString(CultureInfo.InvariantCulture)" tabindex="0" fill=@linkColor style="outline: none;" stroke-width="1" />

@code {
    [Parameter]
    public Vector2D? originState { get; set; }
    [Parameter]
    public Vector2D? destinationState { get; set; }
    [Parameter]
    public Vector2D? mousePosition { get; set; }

    private bool complete = false;

    public float controlX = 100;
    public float controlY = 20;

    public float stateRadius = 50;
    private float arcRadius = 100;
    private float arrowLength = 10;
    private float arrowWidth = 10;
    private Vector2D arcCenter = new Vector2D();

    private string polygonPoints = "";
    private string transitionPath = "";

    private Vector2D lineStart = new Vector2D();
    private Vector2D lineEnd = new Vector2D();
    private Vector2D arrowTip = new Vector2D();
    private Vector2D rightWing = new Vector2D();
    private Vector2D leftWing = new Vector2D();

    private string linkColor = "black";

    protected override async Task OnParametersSetAsync()
    {
        float distance;

        Vector2D transitionDirection;
        Vector2D perpendicularDirection;

        if (destinationState != null)
        {
            distance = (destinationState - originState).Length();
            transitionDirection = (destinationState - originState).Normalized();
            arrowTip = destinationState - transitionDirection * stateRadius;
            lineEnd = destinationState - transitionDirection * (arrowLength + stateRadius);
        } else
        {
            distance = (mousePosition - originState).Length();
            transitionDirection = (mousePosition - originState).Normalized();
            arrowTip = mousePosition;
            lineEnd = mousePosition - transitionDirection * arrowLength;
        }

        perpendicularDirection = transitionDirection.Perpendicular();
        lineStart = originState + transitionDirection * stateRadius;
        complete = true;
        rightWing = lineEnd + perpendicularDirection * arrowLength / 2;
        leftWing = lineEnd - perpendicularDirection * arrowLength / 2;

        if (distance <= arrowLength + stateRadius)
        {
            complete = false;
            arrowTip = lineStart + transitionDirection * arrowLength;
            rightWing = lineStart + perpendicularDirection * arrowLength / 2;
            leftWing = lineStart - perpendicularDirection * arrowLength / 2;
        }

        await InvokeAsync(StateHasChanged);
    }

    private float FindRadius(Vector2D center, Vector2D point)
    {
        return (center - point).Length();
    }
}
