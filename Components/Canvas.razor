<svg @ondblclick="HandleDoubleClick" @onmousedown="HandleMouseDown" @onmouseup="HandleMouseUp" @onmousemove="HandleMouseMove" @onkeydown="HandleKeyDown" @onkeyup="HandleKeyUp" style="@cursor" class="canvas" tabindex="0">
    @foreach (Particle particle in simulation.particles)
    {
        <Node @key="particle.id" nodeId="particle.id" onMouseEnter="HandleEnterNode" onMouseLeave="HandleLeaveNode" onNodeSelected="HandleNodeSelected" svgOrigin=@svgOrigin @bind-position=particle.position @bind-text=particle.name @bind-marked=particle.marked></Node>
    }
    @foreach (SMTransition transition in simulation.transitions)
    {
        <Link onLinkSelected="HandleLinkSelected" originState=@transition.origin.position destinationState=@transition.destination.position svgOrigin="svgOrigin"></Link>
    }
    @if(isCreatingTempLink)
    {
        <TempLink originState="tempLinkOriginState" destinationState="tempLinkDestinationState" mousePosition="mousePosition"></TempLink>
    }
</svg>


@code {
    [Parameter]
    public Simulation? simulation { get; set; }
    [Parameter]
    public EventCallback<Simulation> simulationChanged { get; set; }

    private Vector2D svgOrigin = new Vector2D();

    private bool holdingShift = false;
    private bool holdingSpace = false;
    private bool mouseDown = false;

    private bool isCreatingTempLink = false;
    private bool isCreatingTransition = false;
    private bool isPanning = false;
    private bool movingElement = false;

    private string cursor = "cursor: default;";

    private Node? activeNodeReference;
    private Link? activeLinkReference;

    private Node? insideNodeReference;

    private Vector2D tempLinkOriginState;
    private Vector2D tempLinkDestinationState;
    private Guid tempLinkOriginID;
    private Guid tempLinkDestinationID;

    private Vector2D tempLinkOrigin;
    private Vector2D tempLinkMouse;
    private Vector2D mousePosition;

    private async void HandleDoubleClick(MouseEventArgs e)
    {
        Vector2D mousePosition = new Vector2D((float)e.OffsetX, (float)e.OffsetY);
        Vector2D newParticlePosition = mousePosition.FromSvgCoordinates(svgOrigin);
        Particle newParticle = new Particle(newParticlePosition, "", false);
        simulation.particles.Add(newParticle);
        await simulationChanged.InvokeAsync(simulation);
        Console.WriteLine("mais uma particula adicionada" + simulation.particles.Count);
        StateHasChanged();
    }

    private async Task HandleMouseDown(MouseEventArgs e)
    {
        if (e.Button == 0)
        {
            mouseDown = true;
            if (holdingSpace)
            {
                isPanning = true;
                cursor = "cursor: grabbing;";
                await InvokeAsync(StateHasChanged);
            } else if(holdingShift)
            {
                if (insideNodeReference != null)
                {
                    Console.WriteLine(insideNodeReference.position);
                    isCreatingTempLink = true;
                    tempLinkOriginState = insideNodeReference.position.ToSvgCoordinates(svgOrigin);
                    tempLinkOriginID = insideNodeReference.nodeId;
                    Console.WriteLine(tempLinkOriginState);
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    private async Task HandleMouseUp(MouseEventArgs e)
    {
        if (e.Button == 0)
        {
            mouseDown = false;
            movingElement = false;
            if (isPanning)
            {
                isPanning = false;
                cursor = "cursor: grab;";
                await InvokeAsync(StateHasChanged);
            } 
            else if (isCreatingTempLink)
            {
                if (tempLinkDestinationState != null)
                {
                    await AddNewLink();
                    await InvokeAsync(StateHasChanged);
                }
                else
                {
                    isCreatingTempLink = false;
                    tempLinkOriginState = null;
                    tempLinkDestinationState = null;
                }
            }
        }
    }

    private async Task HandleNodeSelected(Node node)
    {
        if (activeLinkReference != null)
        {
            await activeLinkReference.HandleLoseFocus();
            activeLinkReference = null;
            activeNodeReference = node;
            await activeNodeReference.HandleGainFocus();
        }
        else if (activeNodeReference != null && activeNodeReference != node)
        {
            await activeNodeReference.HandleLoseFocus();
            activeNodeReference = node;
            await activeNodeReference.HandleGainFocus();
        }
        else
        {
            activeNodeReference = node;
            await activeNodeReference.HandleGainFocus();
        }
        movingElement = true;
    }

    private async Task HandleLinkSelected(Link link)
    {
        if (activeNodeReference != null)
        {
            await activeNodeReference.HandleLoseFocus();
            activeNodeReference = null;
            activeLinkReference = link;
            await activeLinkReference.HandleGainFocus();
        }
        else if (activeLinkReference != null && activeLinkReference != link)
        {
            await activeLinkReference.HandleLoseFocus();
            activeLinkReference = link;
            await activeLinkReference.HandleGainFocus();
        }
        else
        {
            activeLinkReference = link;
            await activeLinkReference.HandleGainFocus();
        }
        movingElement = true;
    }

    private void HandleLinkDeSelected(Link link)
    {
        if (activeLinkReference == link)
            activeLinkReference = null;
    }

    private async Task HandleMouseMove(MouseEventArgs e)
    {
        if (isPanning)
        {
            svgOrigin += new Vector2D((float) -e.MovementX, (float) e.MovementY);
            await InvokeAsync(StateHasChanged);
        }
        else if (holdingShift)
        {
            mousePosition = new Vector2D((float) e.OffsetX, (float) e.OffsetY);
            await InvokeAsync(StateHasChanged);
        }
        else if (mouseDown && movingElement && activeNodeReference != null)
        {
            await activeNodeReference.HandleMouseMove(e);
        }
        else if (mouseDown && movingElement && activeLinkReference != null)
        {
            Console.WriteLine("moving link");
            await activeLinkReference.HandleMouseMove(e);
        }
    }

    // WHAT NODE THE MOUSE IS INSIDE

    private void HandleEnterNode(Node node)
    {
        insideNodeReference = node;
        if (isCreatingTempLink)
        {
            tempLinkDestinationState = node.position.ToSvgCoordinates(svgOrigin);
            tempLinkDestinationID = node.nodeId;
        }
    }

    private void HandleLeaveNode(Node node)
    {
        insideNodeReference = null;
        if (isCreatingTempLink)
        {
            tempLinkDestinationState = null;
            tempLinkDestinationID = Guid.Empty;
        }
    }

    // KEYBOARD EVENTS

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == " " && !isPanning)
        {
            holdingSpace = true;
            cursor = "cursor: grab;";
            await InvokeAsync(StateHasChanged);
        }
        else if (e.Key == "Shift")
        {
            holdingShift = true;
        }
    }

    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (activeLinkReference != null)
        {
            activeLinkReference.HandleKeyUp(e);
        }
        if (e.Key == " ")
        {
            holdingSpace = false;
            cursor = "cursor: default;";
            isPanning = false;
            await InvokeAsync(StateHasChanged);
        }
        else if (e.Key == "Shift")
        {
            holdingShift = false;
        }
    }

    private async Task AddNewLink()
    {
        SMTransition newLink = new SMTransition(TransitionType.State, simulation.particles.Find(x => x.id == tempLinkOriginID), simulation.particles.Find(x => x.id == tempLinkDestinationID), "");

        if (activeLinkReference != null)
        {
            await activeLinkReference.HandleLoseFocus();
            activeLinkReference = null;
        }
        else if (activeNodeReference != null)
        {
            await activeNodeReference.HandleLoseFocus();
            activeNodeReference = null;
        }

        tempLinkOriginState = null;
        tempLinkDestinationState = null;
        isCreatingTempLink = false;

        simulation.transitions.Add(newLink);

        await InvokeAsync(StateHasChanged);
    }
}
